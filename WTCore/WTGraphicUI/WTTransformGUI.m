
classdef WTTransformGUI
    
    methods(Static)
        function success = defineCWTParams(waveletTransformPrms, timeRange, maxFreq, maxChans, enableLog)
            success = false;

            WTValidations.mustBeA(waveletTransformPrms, ?WTWaveletTransformCfg)

            if ~WTValidations.isValidProperRange(timeRange)
                WTException.badArg('Bad argument type or value: timeRange').throw();
            end
            if ~WTValidations.isScalarInt(maxChans) || maxChans <= 0 
                WTException.badArg('Bad argument type or value: maxChans').throw();
            end
            if ~WTValidations.isScalarInt(maxFreq) || maxFreq <= 0 
                WTException.badArg('Bad argument type or value: maxFreq').throw();
            end

            answer = { ...
                num2str(waveletTransformPrms.TimeMin), ...
                num2str(waveletTransformPrms.TimeMax), ...
                waveletTransformPrms.TimeRes, ...
                num2str(waveletTransformPrms.FreqMin), ...
                num2str(waveletTransformPrms.FreqMax), ...
                waveletTransformPrms.FreqRes, ...
                waveletTransformPrms.EdgePadding, ...,
                [ '[ ' num2str(waveletTransformPrms.ChannelsList) ']' ], ...
                [ '[ ' num2str(waveletTransformPrms.EpochsList) ']' ], ...
                waveletTransformPrms.LogarithmicTransform, ...
                waveletTransformPrms.EvokedOscillations, ...
                waveletTransformPrms.NormalizedWavelets, ...
                waveletTransformPrms.WaveletsCycles, ...
            };
            
            logFlag = WTCodingUtils.ifThenElse(enableLog, 'on', 'off');
        
            function params = setParameters(answer) 
                params = { ...
                    { 'style' 'text'       'string' sprintf('Time (ms) [%d,%d]: From', timeRange(1),timeRange(2)) } ...
                    { 'style' 'edit'       'string' answer{1,1} } ...
                    { 'style' 'text'       'string' 'To' } ...
                    { 'style' 'edit'       'string' answer{1,2} } ...
                    { 'style' 'text'       'string' 'By (default = 1)' } ...
                    { 'style' 'edit'       'string' answer{1,3} } ...
                    { 'style' 'text'       'string' sprintf('Frequency (Hz) [%d,%d]: From', 1, maxFreq) } ...
                    { 'style' 'edit'       'string' answer{1,4} } ...
                    { 'style' 'text'       'string' 'To' } ...
                    { 'style' 'edit'       'string' answer{1,5} } ...
                    { 'style' 'text'       'string' 'By (default = 1)' } ...
                    { 'style' 'edit'       'string' answer{1,6} } ...
                    { 'style' 'text'       'string' 'Edges Padding (ms), default = 0:' } ...
                    { 'style' 'edit'       'string' answer{1,7} } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' sprintf('Channels to process: array elem in [%d,%d], [] = all', 1, maxChans) } ...
                    { 'style' 'edit'       'string' answer{1,8} } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' 'Epochs to process: array elem >= 1, [] = all' } ...
                    { 'style' 'edit'       'string' answer{1,9} } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' 'Log10-Transform' 'enable' logFlag } ...
                    { 'style' 'checkbox'   'value' answer{1,10} 'enable' logFlag } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' 'Compute Evoked Oscillations' } ...
                    { 'style' 'checkbox'   'value' answer{1,11} } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' 'Normalize wavelets' } ...
                    { 'style' 'checkbox'   'value' answer{1,12} } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' 'Wavelet cycles: value in [2,15])' } ...
                    { 'style' 'edit'       'string' answer{1,13} }};
            end

            geometry = { ...
                [0.15 0.05 0.05 0.05 0.1 0.05] [0.15 0.05 0.05 0.05 0.1 0.05] [0.15 0.05 0.05 0.05 0.1 0.05] ...
                [0.15 0.30 0.00 0.00 0.0 0.00] [0.15 0.30 0.00 0.00 0.0 0.00] [0.15 0.30 0.00 0.00 0.0 0.00] ...
                [0.15 0.05 0.05 0.05 0.1 0.05] [0.15 0.05 0.05 0.05 0.1 0.05] [0.15 0.05 0.05 0.05 0.1 0.05] };

            % geometry = { ...
            %     [1 0.5 0.25 0.5 0.5 0.5] [1 0.5 0.25 0.5 0.5 0.5] [1 0.5 0.25 0.5 0.5 0.5] ...
            %     [1.34 2 0.25 0.25 0.25 0.25] [1.34 2 0.25 0.25 0.25 0.25] [1 0.5 0.25 0.5 0.5 0.5] ...
            %     [1 0.5 0.25 0.5 0.5 0.5] [1 0.5 0.25 0.5 0.5 0.5] [1 0.5 1 0.25 0.25 0.25] };
                
            isInt        = @WTValidations.isInt;
            isIntGTE     = @WTValidations.isScalarIntGTE;
            isIntBetween = @WTValidations.isScalarIntBetween;
            warnDlg      = @(msg)WTDialogUtils.wrnDlg('Review parameter', msg);

            while true
                params = setParameters(answer);
                answer = WTEEGLabUtils.eeglabInputMask( 'geometry', geometry, 'uilist', params, 'title', 'Set wavelet transformation params');
                
                if isempty(answer)
                    return % quit on cancel button
                end
                
                try
                    timeMin = WTNumUtils.str2double(answer{1,1});
                    if ~isIntBetween(timeMin, timeRange(1), timeRange(2)-1)
                        warnDlg(sprintf('Bad min time value, got: %s', answer{1,1}));
                        continue;
                    end
                    timeMax = WTNumUtils.str2double(answer{1,2});
                    if ~isIntBetween(timeMax, timeMin+1, timeRange(2))
                        warnDlg(sprintf('Bad max time value, got: %s', answer{1,2}));
                        continue;
                    end
                    timeRes = WTNumUtils.str2double(answer{1,3});
                    if ~isIntBetween(timeRes, 1, max(1,(timeMax-timeMin+1)/2))
                        warnDlg(sprintf('Bad time resolution value, got: %s', answer{1,3}));
                        continue;
                    end
                    freqMin = WTNumUtils.str2double(answer{1,4});
                    if ~isIntBetween(freqMin, 1, max(1, maxFreq-1)) 
                        warnDlg(sprintf('Bad min frequency value, got: %s', answer{1,4}));
                        continue;
                    end
                    freqMax = WTNumUtils.str2double(answer{1,5});
                    if ~isIntBetween(freqMax, freqMin, maxFreq) 
                        warnDlg(sprintf('Bad max frequency value, got: %s', answer{1,5}));
                        continue;
                    end
                    freqRes = WTNumUtils.str2double(answer{1,6});
                    if ~isIntBetween(freqRes, 1, max(1,(freqMax-freqMin+1)/2)) 
                        warnDlg(sprintf('Bad frequency resolution value, got: %s', answer{1,6}));
                        continue;
                    end
                    extraEdges = WTNumUtils.str2double(answer{1,7});
                    if ~isIntGTE(extraEdges, 0) 
                        warnDlg(sprintf('Bad extra edges value, got: %s', answer{1,7}));
                        continue;
                    end
                    channelsList = unique(WTNumUtils.str2nums(answer{1,8}));
                    if ~isempty(channelsList) && (~all(arrayfun(isInt, channelsList)) || any(channelsList < 1) || any(channelsList > maxChans)) 
                        warnDlg(sprintf('Bad channels list, got: %s', answer{1,8}));
                        continue;
                    end
                    epochsList = unique(WTNumUtils.str2nums(answer{1,9}));
                    if ~isempty(epochsList) && (~all(arrayfun(isInt, epochsList)) || any(epochsList < 1)) 
                        warnDlg(sprintf('Bad epochs list, got: %s', answer{1,9}));
                        continue;
                    end

                    logTransform = answer{1,10};
                    evok = answer{1,11};
                    normalizeWavelet = answer{1,12};
                    cycles = WTNumUtils.str2double(answer{1,13});

                    if ~isIntBetween(cycles, 2, 15)
                        warnDlg(sprintf('Bad wavelet cycles value, got: %s', answer{1,13}))
                        continue;
                    end
                    if evok && ~isempty(epochsList)
                        warnDlg('Option "Compute Evoked Oscillations" requires epochs to process []');
                        continue    
                    end
                catch me
                    wtLog.except(me);
                    WTDialogUtils.wrnDlg('Review parameter', 'Invalid parameters: check the log for details');
                end
                break
            end 
            
            waveletTransformPrms.TimeMin = timeMin;
            waveletTransformPrms.TimeMax = timeMax;
            waveletTransformPrms.TimeRes = timeRes;
            waveletTransformPrms.FreqMin = freqMin;
            waveletTransformPrms.FreqMax = freqMax;
            waveletTransformPrms.FreqRes = freqRes;
            waveletTransformPrms.EdgePadding = extraEdges;
            waveletTransformPrms.ChannelsList = channelsList;
            waveletTransformPrms.EpochsList = epochsList;
            waveletTransformPrms.LogarithmicTransform = logTransform;
            waveletTransformPrms.EvokedOscillations = evok;
            waveletTransformPrms.NormalizedWavelets = normalizeWavelet;
            waveletTransformPrms.WaveletsCycles = cycles;
            success = true;
        end
    end
end