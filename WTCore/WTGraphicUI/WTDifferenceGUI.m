
% Copyright (C) 2024 Eugenio Parise, Luca Filippin
%
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program. If not, see <https://www.gnu.org/licenses/>.

classdef WTDifferenceGUI
    
    methods(Static)
        function success = defineDifferenceParams(differencePrms, conditionsGrandPrms, logFlag, evokFlag)
            success = false;
            wtProject = WTProject();
            wtLog = WTLog();

            WTValidations.mustBe(differencePrms, ?WTDifferenceCfg)
            WTValidations.mustBe(conditionsGrandPrms, ?WTConditionsGrandCfg)
            
            conditions = conditionsGrandPrms.ConditionsList;
            nConditions = length(conditions);

            if nConditions <= 1
                wtProject.notifyWrn([], 'There are %d conditions: calculating difference make no sense.', nConditions)
                return
            end

            conditionsDiff = conditionsGrandPrms.ConditionsDiff;
            nConditionsDiff = length(conditionsDiff);
            
            answer = { 1, 1, 1, logFlag, evokFlag }; 
            enableLog = 'off';
            enableEvok ='off';

            if differencePrms.exist()
                answer{1} = WTCodingUtils.ifThenElse(differencePrms.Condition1 <= nConditions, ...
                    differencePrms.Condition1, 1);
                answer{2} = WTCodingUtils.ifThenElse(differencePrms.Condition2 <= nConditions, ...
                    differencePrms.Condition2, 1);
                answer{3} = WTCodingUtils.ifThenElse(differencePrms.ConditionsDiff <= nConditionsDiff, ...
                    differencePrms.ConditionsDiff, 1);
            end 

            try
                userData = struct();
                userData.conditions = conditions;
                userData.conditionsDiff = conditionsDiff;
                userData.cnd1 = conditions{answer{1,1}};
                userData.cnd2 = conditions{answer{1,2}};
                hUserData = WTHandle(userData);
                
                cbList1 = [ ...
                    'ud = get(findobj(gcbf, ''tag'', ''list1''), ''userdata'');' ...
                    'idx1 = get(findobj(gcbf, ''tag'', ''list1''), ''value'');' ...
                    'ud.Value.cnd1 = ud.Value.conditions{idx1};' ];
                
                cbList2 = [ ...
                    'ud = get(findobj(gcbf, ''tag'', ''list1''), ''userdata'');' ...
                    'idx2 = get(findobj(gcbf, ''tag'', ''list2''), ''value'');' ...
                    'ud.Value.cnd2 = ud.Value.conditions{idx2};' ];
                
                cbPair = [ ...
                    'ud = get(findobj(gcbf, ''tag'', ''list1''), ''userdata'');' ...
                    'conditionsDiff = ud.Value.conditionsDiff;' ...
                    'conditions = ud.Value.conditions;' ...
                    'cnd1 = ud.Value.cnd1;' ...
                    'cnd2 = ud.Value.cnd2;' ...
                    'if ~isempty(cnd1) && ~strcmp(cnd1, cnd2),' ...
                    '  cndDiff = [cnd1 ''-'' cnd2];' ...
                    '  if ~any(ismember(conditionsDiff, cndDiff)),' ...
                    '    conditionsDiff = [conditionsDiff {cndDiff}];' ...
                    '    set(findobj(gcbf, ''tag'', ''list3''), ''string'', conditionsDiff);' ...
                    '    ud.Value.conditionsDiff = conditionsDiff;' ...
                    '  end;' ...
                    'end;' ];
                
                cbDel = [ ...
                    'ud = get(findobj(gcbf, ''tag'', ''list1''), ''userdata'');' ...
                    'conditionsDiff = ud.Value.conditionsDiff;' ...
                    'if ~isempty(conditionsDiff),' ...
                    '  idx3 = get(findobj(gcbf, ''tag'', ''list3''), ''value'');' ...
                    '  conditionsDiff(idx3) = [];' ...
                    '  set(findobj(gcbf, ''tag'', ''list3''), ''string'', conditionsDiff);' ...
                    '  if ~isempty(conditionsDiff),' ...
                    '    set(findobj(gcbf, ''tag'', ''list3''), ''Value'', 1);' ...
                    '  end;' ...
                    '  ud.Value.conditionsDiff = conditionsDiff;' ...
                    'end;' ];
                
                geometry = { [4 4 2 4] [4 4 2 4] };
                geomvert = [ min(nConditions, 10) 1 ];
                
                parameters = { ...
                    { 'Style' 'listbox' 'tag' 'list1' 'string' conditions 'value' answer{1,1} 'callback' cbList1 'userdata' hUserData}, ...
                    { 'Style' 'listbox' 'tag' 'list2' 'string' conditions 'value' answer{1,2} 'callback' cbList2 }, ...
                    { 'Style' 'pushbutton' 'string' '>>>' 'callback' cbPair } ...
                    { 'Style' 'listbox' 'tag' 'list3' 'string' conditionsDiff 'value' answer{1,3} } ...
                    { 'style' 'checkbox' 'string' 'Log10-Transformed data' 'value' answer{1,4} 'enable' enableLog } ...
                    { 'style' 'checkbox' 'string' 'Evoked Oscillations' 'value' answer{1,5} 'enable' enableEvok } ...
                    { 'style' 'text' 'string'  '' } ...
                    { 'Style' 'pushbutton' 'string' 'Delete difference' 'callback' cbDel } };
                
                answer = WTEEGLabUtils.eeglabInputMask('geometry', geometry, 'geomvert', geomvert, 'uilist', parameters, 'title', 'Define differences to compute');

                if isempty(answer)
                    wtLog.dbg('User quitted difference configuration dialog');
                    return
                end

                success = all([ ...
                    WTTryExec(@()set(conditionsGrandPrms, 'ConditionsDiff', hUserData.Value.conditionsDiff)).logWrn().displayWrn('Review parameter', 'Invalid Difference').run().Succeeded ...
                    WTTryExec(@()set(differencePrms, 'Condition1', answer{1,1})).logWrn().displayWrn('Review parameter', 'Invalid Condition1 index').run().Succeeded ...
                    WTTryExec(@()set(differencePrms, 'Condition2', answer{1,2})).logWrn().displayWrn('Review parameter', 'Invalid Condition2 index').run().Succeeded ... 
                    WTTryExec(@()set(differencePrms, 'ConditionsDiff', answer{1,3})).logWrn().displayWrn('Review parameter', 'Invalid Difference index').run().Succeeded ... 
                    WTTryExec(@()set(differencePrms, 'LogarithmicTransform', answer{1,4})).logWrn().displayWrn('Review parameter', 'Invalid LogarithmicTransform').run().Succeeded ...
                    WTTryExec(@()set(differencePrms, 'EvokedOscillations', answer{1,5})).logWrn().displayWrn('Review parameter', 'Invalid EvokedOscillations').run().Succeeded ...
                ]);

            catch me
                wtLog.except(me);
            end
        end
    end
end