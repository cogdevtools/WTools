
classdef WTDifferenceGUI
    
    methods(Static)
        function success = defineDifferenceParams(differencePrms, conditionsGrandPrms, logFlag, evokFlag)
            success = false;
            wtProject = WTProject();
            wtLog = WTLog();

            WTValidations.mustBeA(differencePrms, ?WTDifferenceCfg)
            WTValidations.mustBeA(conditionsGrandPrms, ?WTConditionsGrandCfg)
            
            answer = { 1, 1, 1, logFlag, evokFlag }; 
            enableLog = 'off';
            enableEvok ='off';

            if differencePrms.exist()
                answer{1} = differencePrms.Condition1;
                answer{2} = differencePrms.Condition2;
                answer{3} = differencePrms.ConditionsDiff;
            end 

            % Assign conditions and conditionsDiff to the base workspace to prevent errors of the gui
            conditions = conditionsGrandPrms.ConditionsList;
            conditionsDiff = conditionsGrandPrms.ConditionsDiff;
            nConditions = length(conditions);

            if nConditions <= 1
                wtProject.notifyWrn([], 'There are %d conditions: calculating difference make no sense.', nConditions)
                return
            end

            try
                userData = struct();
                userData.conditions = conditions;
                userData.conditionsDiff = conditionsDiff;
                userData.cnd1 = conditions{WTCodingUtils.ifThenElse(answer{1,1} < length(conditions), answer{1,1}, 1)};
                userData.cnd2 = conditions{WTCodingUtils.ifThenElse(answer{1,2} < length(conditions), answer{1,2}, 1)};
                hUserData = WTHandle(userData);
                
                cbList1 = [ ...
                    'ud = get(findobj(gcbf, ''tag'', ''list1''), ''userdata'');' ...
                    'idx1 = get(findobj(gcbf, ''tag'', ''list1''), ''value'');' ...
                    'ud.Value.cnd1 = ud.Value.conditions{idx1};' ];
                
                cbList2 = [ ...
                    'ud = get(findobj(gcbf, ''tag'', ''list1''), ''userdata'');' ...
                    'idx2 = get(findobj(gcbf, ''tag'', ''list2''), ''value'');' ...
                    'ud.Value.cnd2 = ud.Value.conditions{idx2};' ];
                
                cbPair = [ ...
                    'ud = get(findobj(gcbf, ''tag'', ''list1''), ''userdata'');' ...
                    'conditionsDiff = ud.Value.conditionsDiff;' ...
                    'conditions = ud.Value.conditions;' ...
                    'cnd1 = ud.Value.cnd1;' ...
                    'cnd2 = ud.Value.cnd2;' ...
                    'if ~isempty(cnd1) && ~strcmp(cnd1, cnd2),' ...
                    '  cndDiff = [cnd1 ''-'' cnd2];' ...
                    '  if ~any(ismember(conditionsDiff, cndDiff)),' ...
                    '    conditionsDiff = [conditionsDiff {cndDiff}];' ...
                    '    set(findobj(gcbf, ''tag'', ''list3''), ''string'', conditionsDiff);' ...
                    '    ud.Value.conditionsDiff = conditionsDiff;' ...
                    '  end;' ...
                    'end;' ];
                
                cbDel = [ ...
                    'ud = get(findobj(gcbf, ''tag'', ''list1''), ''userdata'');' ...
                    'conditionsDiff = ud.Value.conditionsDiff;' ...
                    'if ~isempty(conditionsDiff),' ...
                    '  idx3 = get(findobj(gcbf, ''tag'', ''list3''), ''value'');' ...
                    '  conditionsDiff(idx3) = [];' ...
                    '  set(findobj(gcbf, ''tag'', ''list3''), ''string'', conditionsDiff);' ...
                    '  if ~isempty(conditionsDiff),' ...
                    '    set(findobj(gcbf, ''tag'', ''list3''), ''Value'', 1);' ...
                    '  end;' ...
                    '  ud.Value.conditionsDiff = conditionsDiff;' ...
                    'end;' ];
                
                geometry = { [4 4 2 4] [4 4 2 4] };
                geomvert = [ min(nConditions, 10) 1 ];
                
                parameters = { ...
                    { 'Style' 'listbox' 'tag' 'list1' 'string' conditions 'value' answer{1,1} 'callback' cbList1 'userdata' hUserData}, ...
                    { 'Style' 'listbox' 'tag' 'list2' 'string' conditions 'value' answer{1,2} 'callback' cbList2 }, ...
                    { 'Style' 'pushbutton' 'string' '>>>' 'callback' cbPair } ...
                    { 'Style' 'listbox' 'tag' 'list3' 'string' conditionsDiff 'value' answer{1,3} } ...
                    { 'style' 'checkbox' 'string' 'Log10-Transformed data' 'value' answer{1,4} 'enable' enableLog } ...
                    { 'style' 'checkbox' 'string' 'Evoked Oscillations' 'value' answer{1,5} 'enable' enableEvok } ...
                    { 'style' 'text' 'string'  '' } ...
                    { 'Style' 'pushbutton' 'string' 'Delete difference' 'callback' cbDel } };
                
                answer = WTEEGLabUtils.eeglabInputMask('geometry', geometry, 'geomvert', geomvert, 'uilist', parameters, 'title', 'Define differences to compute');

                if ~isempty(answer)
                    conditionsGrandPrms.ConditionsDiff = hUserData.Value.conditionsDiff;
                    differencePrms.Condition1 = answer{1,1};
                    differencePrms.Condition2 = answer{1,2};
                    differencePrms.ConditionsDiff = answer{1,3};
                    differencePrms.LogarithmicTransform = answer{1,4};
                    differencePrms.EvokedOscillations = answer{1,5};
                    success = true;
                end

            catch me
                wtLog.except(me);
                return
            end
        end
    end
end