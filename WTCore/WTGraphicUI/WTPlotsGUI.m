% Copyright (C) 2024 Eugenio Parise, Luca Filippin
%
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program. If not, see <https://www.gnu.org/licenses/>.

classdef WTPlotsGUI

    methods(Static)
        % subject = [] when the grand average directory is selected instead of a specific subject dir
        function [fileNames, filesPath, fileType, subject] = selectFilesToPlot(evokedOscillations, perSubject, averageOnly, maxFilesNum)
            wtProject = WTProject();
            wtLog = WTLog();
            ioProc = wtProject.Config.IOProc;
            subject = [];
            
            [fileType, fileExt] = ioProc.getGrandAverageFileTypeAndExtension(perSubject, evokedOscillations);
            fileFilter = {  sprintf('*-%s%s', fileType, fileExt), 'All Files' };

            while true
                title = 'Select files to plot';
                if maxFilesNum > 0
                    title = sprintf('%s\n[ Max %d files ]', title, maxFilesNum);
                end

                rootSelectionDir = WTCodingUtils.ifThenElse(averageOnly, ioProc.GrandAvgDir, ioProc.AnalysisDir);
                
                [fileNames, filesPath, ~] = WTDialogUtils.uiGetFiles(fileFilter, -1, maxFilesNum, title, ...
                    'MultiSelect', 'on', 'restrictToDirs', ['^' regexptranslate('escape', rootSelectionDir)], rootSelectionDir);
                if isempty(fileNames) 
                    wtLog.warn('No files to plot selected');
                    return
                end

                if averageOnly
                    break
                end
                
                subject = ioProc.getSubjectFromPath(filesPath);
                if ~isempty(subject) || ioProc.isGrandAvgDir(filesPath)
                    break
                end
                
                WTEEGLabUtils.eeglabMsgDlg('Warning', ...
                    'Directory:\n   ''%s''\ndoesn''t look like a subject directory.\nPlease select again...', filesPath)
            end
        end

        function success = defineAvgPlotsSettings(plotsPrms, logFlag) 
            success = false;
            WTValidations.mustBe(plotsPrms, ?WTAvgPlotsCfg);
            wtLog = WTLog();
            
            if (abs(plotsPrms.Scale(1)) == abs(plotsPrms.Scale(2))) && ...
                (logFlag && (plotsPrms.Scale(2) < 3)) || (~logFlag && (plotsPrms.Scale(2) >= 3))
                plotsPrms.Scale = WTCodingUtils.ifThenElse(logFlag, [-10.0 10.0], [-0.5 0.5]);
            end  

            answer = { ...
                num2str(plotsPrms.TimeMin) ...
                num2str(plotsPrms.TimeMax) ...
                num2str(plotsPrms.FreqMin) ...
                num2str(plotsPrms.FreqMax) ...
                sprintf(WTConfigFormatter.FmtArray, num2str(plotsPrms.Scale)) ...
                plotsPrms.Contours ...
                plotsPrms.AllChannels ... 
            };

            scaleLabel = WTCodingUtils.ifThenElse(logFlag, 'Scale (% change)', 'Scale (mV)');
            
            function params = setParameters(answer) 
                params = { ...
                    { 'style' 'text'     'string' 'Time (ms): From     ' } ...
                    { 'style' 'edit'     'string' answer{1,1} } ...
                    { 'style' 'text'     'string' 'To' } ...
                    { 'style' 'edit'     'string' answer{1,2} }...
                    { 'style' 'text'     'string' 'Frequency (Hz): From' } ...
                    { 'style' 'edit'     'string' answer{1,3} }...
                    { 'style' 'text'     'string' 'To' } ...
                    { 'style' 'edit'     'string' answer{1,4} }...
                    { 'style' 'text'     'string' scaleLabel } ...
                    { 'style' 'edit'     'string' answer{1,5} }...
                    { 'style' 'text'     'string' 'Draw contours' } ...
                    { 'style' 'checkbox' 'value'  answer{1,6} } ...
                    { 'style' 'text'     'string' 'Plot all channels' } ...
                    { 'style' 'checkbox' 'value'  answer{1,7} } ...
                    { 'style' 'text'     'string' '' } ...
                    { 'style' 'text'     'string' '' } ...
                };
            end

            geometry = { [0.25 0.15 0.15 0.15] [0.25 0.15 0.15 0.15] [0.25 0.15 0.15 0.15] [0.25 0.15 0.15 0.15] };
            
            while ~success
                parameters = setParameters(answer);
                answer = WTEEGLabUtils.eeglabInputMask('geometry', geometry, 'uilist', parameters, 'title', 'Set plots parameters');
                
                if isempty(answer)
                    wtLog.dbg('User quitted average plots configuration dialog');
                    return 
                end
                
                success = all([ ...
                    WTTryExec(@()set(plotsPrms, 'TimeMin', WTNumUtils.str2double(answer{1,1}))).logWrn().displayWrn('Review parameter', 'Invalid TimeMin').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'TimeMax', WTNumUtils.str2double(answer{1,2}))).logWrn().displayWrn('Review parameter', 'Invalid TimeMax').run().Succeeded ... 
                    WTTryExec(@()set(plotsPrms, 'FreqMin', WTNumUtils.str2double(answer{1,3}))).logWrn().displayWrn('Review parameter', 'Invalid FreqMin').run().Succeeded ... 
                    WTTryExec(@()set(plotsPrms, 'FreqMax', WTNumUtils.str2double(answer{1,4}))).logWrn().displayWrn('Review parameter', 'Invalid FreqMax').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'Scale', WTNumUtils.str2nums(answer{1,5}))).logWrn().displayWrn('Review parameter', 'Invalid Scale').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'Contours', answer{1,6})).logWrn().displayWrn('Review parameter', 'Invalid Contours').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'AllChannels', answer{1,7})).logWrn().displayWrn('Review parameter', 'Invalid AllChannels').run().Succeeded ... 
                ]);

                success = success && WTTryExec(@()plotsPrms.validate(true)).logWrn().displayWrn('Review parameter', 'Validation failure').run().Succeeded; 
            end
        end

        function success = defineAvgStdErrPlotsSettings(plotsPrms)
            success = false; 
            WTValidations.mustBe(plotsPrms, ?WTAvgStdErrPlotsCfg);
            wtLog = WTLog();

            answer = { ...
                num2str(plotsPrms.TimeMin) ...
                num2str(plotsPrms.TimeMax) ...
                num2str(plotsPrms.FreqMin) ...
                num2str(plotsPrms.FreqMax) ...
                plotsPrms.AllChannels ... 
            };
            
            function params = setParameters(answer) 
                params = { ...
                    { 'style' 'text'     'string' 'Time (ms): From     ' } ...
                    { 'style' 'edit'     'string' answer{1,1} } ...
                    { 'style' 'text'     'string' 'To' } ...
                    { 'style' 'edit'     'string' answer{1,2} }...
                    { 'style' 'text'     'string' 'Frequency (Hz): From' } ...
                    { 'style' 'edit'     'string' answer{1,3} }...
                    { 'style' 'text'     'string' 'To' } ...
                    { 'style' 'edit'     'string' answer{1,4} }...
                    { 'style' 'text'     'string' 'Plot all channels' } ...
                    { 'style' 'checkbox' 'value'  answer{1,5} } ...
                    { 'style' 'text'     'string' '' } ...
                    { 'style' 'text'     'string' '' } ...
                };
            end

            geometry = { [0.25 0.15 0.15 0.15] [0.25 0.15 0.15 0.15] [0.25 0.15 0.15 0.15] };

            while ~success
                parameters = setParameters(answer);
                answer = WTEEGLabUtils.eeglabInputMask('geometry', geometry, 'uilist', parameters, 'title', 'Set plots parameters');
                
                if isempty(answer)
                    wtLog.dbg('User quitted average + std error plots configuration dialog');
                    return 
                end

                success = all([ ...
                    WTTryExec(@()set(plotsPrms, 'TimeMin', WTNumUtils.str2double(answer{1,1}))).logWrn().displayWrn('Review parameter', 'Invalid TimeMin').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'TimeMax', WTNumUtils.str2double(answer{1,2}))).logWrn().displayWrn('Review parameter', 'Invalid TimeMax').run().Succeeded ... 
                    WTTryExec(@()set(plotsPrms, 'FreqMin', WTNumUtils.str2double(answer{1,3}))).logWrn().displayWrn('Review parameter', 'Invalid FreqMin').run().Succeeded ... 
                    WTTryExec(@()set(plotsPrms, 'FreqMax', WTNumUtils.str2double(answer{1,4}))).logWrn().displayWrn('Review parameter', 'Invalid FreqMax').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'AllChannels', answer{1,5})).logWrn().displayWrn('Review parameter', 'Invalid AllChannels').run().Succeeded ... 
                ]);

                success = success && WTTryExec(@()plotsPrms.validate(true)).logWrn().displayWrn('Review parameter', 'Validation failure').run().Succeeded; 
            end
        end

        function success = defineChansAvgPlotsSettings(plotsPrms, logFlag) 
            success = false;
            WTValidations.mustBe(plotsPrms, ?WTChansAvgPlotsCfg);
            wtLog = WTLog();
            
            if (abs(plotsPrms.Scale(1)) == abs(plotsPrms.Scale(2))) && ...
                (logFlag && (plotsPrms.Scale(2) < 3)) || (~logFlag && (plotsPrms.Scale(2) >= 3))
                plotsPrms.Scale = WTCodingUtils.ifThenElse(logFlag, [-10.0 10.0], [-0.5 0.5]);
            end  

            answer = { ...
                num2str(plotsPrms.TimeMin) ...
                num2str(plotsPrms.TimeMax) ...
                num2str(plotsPrms.FreqMin) ...
                num2str(plotsPrms.FreqMax) ...
                sprintf(WTConfigFormatter.FmtArray, num2str(plotsPrms.Scale)) ...
                plotsPrms.Contours ...
            };

            scaleLabel = WTCodingUtils.ifThenElse(logFlag, 'Scale (% change)', 'Scale (mV)');
            
            function params = setParameters(answer) 
                params = { ...
                    { 'style' 'text'     'string' 'Time (ms): From     ' } ...
                    { 'style' 'edit'     'string' answer{1,1} } ...
                    { 'style' 'text'     'string' 'To' } ...
                    { 'style' 'edit'     'string' answer{1,2} }...
                    { 'style' 'text'     'string' 'Frequency (Hz): From' } ...
                    { 'style' 'edit'     'string' answer{1,3} }...
                    { 'style' 'text'     'string' 'To' } ...
                    { 'style' 'edit'     'string' answer{1,4} }...
                    { 'style' 'text'     'string' scaleLabel } ...
                    { 'style' 'edit'     'string' answer{1,5} }...
                    { 'style' 'text'     'string' 'Draw contours' } ...
                    { 'style' 'checkbox' 'value'  answer{1,6} } ...
                };
            end

            geometry = { [0.25 0.15 0.15 0.15] [0.25 0.15 0.15 0.15] [0.25 0.15 0.15 0.15] };

            while ~success
                parameters = setParameters(answer);
                answer = WTEEGLabUtils.eeglabInputMask('geometry', geometry, 'uilist', parameters, 'title', 'Set plots parameters');
                
                if isempty(answer)
                    return 
                end

                success = all([ ...
                    WTTryExec(@()set(plotsPrms, 'TimeMin', WTNumUtils.str2double(answer{1,1}))).logWrn().displayWrn('Review parameter', 'Invalid TimeMin').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'TimeMax', WTNumUtils.str2double(answer{1,2}))).logWrn().displayWrn('Review parameter', 'Invalid TimeMax').run().Succeeded ... 
                    WTTryExec(@()set(plotsPrms, 'FreqMin', WTNumUtils.str2double(answer{1,3}))).logWrn().displayWrn('Review parameter', 'Invalid FreqMin').run().Succeeded ... 
                    WTTryExec(@()set(plotsPrms, 'FreqMax', WTNumUtils.str2double(answer{1,4}))).logWrn().displayWrn('Review parameter', 'Invalid FreqMax').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'Scale', WTNumUtils.str2nums(answer{1,5}))).logWrn().displayWrn('Review parameter', 'Invalid Scale').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'Contours', answer{1,6})).logWrn().displayWrn('Review parameter', 'Invalid Contours').run().Succeeded ... 
                ]);

                success = success && WTTryExec(@()plotsPrms.validate(true)).logWrn().displayWrn('Review parameter', 'Validation failure').run().Succeeded; 
            end
        end

        function success = defineChansAvgStdErrPlotsSettings(plotsPrms)
            success = false; 
            WTValidations.mustBe(plotsPrms, ?WTChansAvgStdErrPlotsCfg);
            wtLog = WTLog();

            answer = { ...
                num2str(plotsPrms.TimeMin) ...
                num2str(plotsPrms.TimeMax) ...
                num2str(plotsPrms.FreqMin) ...
                num2str(plotsPrms.FreqMax) ...
            };
            
            function params = setParameters(answer) 
                params = { ...
                    { 'style' 'text'     'string' 'Time (ms): From     ' } ...
                    { 'style' 'edit'     'string' answer{1,1} } ...
                    { 'style' 'text'     'string' 'To' } ...
                    { 'style' 'edit'     'string' answer{1,2} }...
                    { 'style' 'text'     'string' 'Frequency (Hz): From' } ...
                    { 'style' 'edit'     'string' answer{1,3} }...
                    { 'style' 'text'     'string' 'To' } ...
                    { 'style' 'edit'     'string' answer{1,4} }...
                };
            end

            geometry = { [0.25 0.15 0.15 0.15] [0.25 0.15 0.15 0.15] };

            while ~success
                parameters = setParameters(answer);
                answer = WTEEGLabUtils.eeglabInputMask('geometry', geometry, 'uilist', parameters, 'title', 'Set plots parameters');
                
                if isempty(answer)
                    wtLog.dbg('User quitted channels average + std error plots configuration dialog');
                    return 
                end

                success = all([ ...
                    WTTryExec(@()set(plotsPrms, 'TimeMin', WTNumUtils.str2double(answer{1,1}))).logWrn().displayWrn('Review parameter', 'Invalid TimeMin').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'TimeMax', WTNumUtils.str2double(answer{1,2}))).logWrn().displayWrn('Review parameter', 'Invalid TimeMax').run().Succeeded ... 
                    WTTryExec(@()set(plotsPrms, 'FreqMin', WTNumUtils.str2double(answer{1,3}))).logWrn().displayWrn('Review parameter', 'Invalid FreqMin').run().Succeeded ... 
                    WTTryExec(@()set(plotsPrms, 'FreqMax', WTNumUtils.str2double(answer{1,4}))).logWrn().displayWrn('Review parameter', 'Invalid FreqMax').run().Succeeded ...
                ]);

                success = success && WTTryExec(@()plotsPrms.validate(true)).logWrn().displayWrn('Review parameter', 'Validation failure').run().Succeeded; 
            end
        end

        function success = define2DScalpMapPlotsSettings(plotsPrms, logFlag, maxSerieLength)
            success = false; 
            WTValidations.mustBe(plotsPrms, ?WT2DScalpMapPlotsCfg);
            maxSerieLength = WTCodingUtils.ifThenElse(nargin > 2, @()maxSerieLength, 0);
            wtLog = WTLog();
            
            if isempty(plotsPrms.Scale) || ...
                ((abs(plotsPrms.Scale(1)) == abs(plotsPrms.Scale(2))) && ...
                (logFlag && (plotsPrms.Scale(2) < 3)) || (~logFlag && (plotsPrms.Scale(2) >= 3)))
                plotsPrms.Scale = WTCodingUtils.ifThenElse(logFlag, [-10.0 10.0], [-0.5 0.5]);
            end  

            answer = { ...
                sprintf(WTConfigFormatter.FmtArray, num2str(plotsPrms.Time)) ...
                sprintf(WTConfigFormatter.FmtArray, num2str(plotsPrms.Frequency)) ...
                sprintf(WTConfigFormatter.FmtArray, num2str(plotsPrms.Scale)) ...
                plotsPrms.PeripheralElectrodes ...
                plotsPrms.Contours ... 
                plotsPrms.ElectrodesLabel ... 
            };

            scaleLabel = WTCodingUtils.ifThenElse(logFlag, 'Scale (% change)', 'Scale (mV)');
            
            function params = setParameters(answer) 
                params = { ...
                    { 'style' 'text'     'string' 'Time (ms): From-[pace]-To     ' } ...
                    { 'style' 'edit'     'string'  answer{1,1} } ...
                    { 'style' 'text'     'string' 'Frequency (Hz): From-[pace]-To' } ...
                    { 'style' 'edit'     'string'  answer{1,2} } ...
                    { 'style' 'text'     'string' '' } ...
                    { 'style' 'text'     'string' '' } ...
                    { 'style' 'text'     'string' 'NOTE: The pace is optional and defines time / frequency series. The pace can be defined either' } ...
                    { 'style' 'text'     'string' '' } ...
                    { 'style' 'text'     'string' '             for time or frequency, not both. Small paces can slow down sensibly the processing.' } ...
                    { 'style' 'text'     'string' '' } ...
                    { 'style' 'text'     'string' '             Example: Frequency = [1 10 201] => 20 frequency based subplots.' } ...
                    { 'style' 'text'     'string' '' } ...
                    { 'style' 'text'     'string' '' } ...
                    { 'style' 'text'     'string' '' } ...
                    { 'style' 'text'     'string'  scaleLabel } ...
                    { 'style' 'edit'     'string'  answer{1,3} } ...
                    { 'style' 'text'     'string' 'Peripheral Electrodes' } ...
                    { 'style' 'checkbox' 'value'   answer{1,4} } ...
                    { 'style' 'text'     'string' 'Draw contours' } ...
                    { 'style' 'checkbox' 'value'   answer{1,5} } ...
                    { 'style' 'text'     'string' 'Electrode labels' } ...
                    { 'style' 'checkbox' 'value'   answer{1,6} } ...
                };
            end
            
            geometry = { [1 1] [1 1] [1 1] [1 0] [1 0] [1 0] [1 1] [1 1] [1 1] [1 1] [1 1] };

            while ~success
                parameters = setParameters(answer);
                answer = WTEEGLabUtils.eeglabInputMask('geometry', geometry, 'uilist', parameters, 'title', 'Set plots parameters');
                
                if isempty(answer)
                    wtLog.dbg('User quitted 2D scalp map plots configuration dialog');
                    return 
                end

                success = all([ ...
                    WTTryExec(@()set(plotsPrms, 'Time', answer{1,1})).logWrn().displayWrn('Review parameter', 'Invalid Time').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'Frequency', answer{1,2})).logWrn().displayWrn('Review parameter', 'Invalid Frequency').run().Succeeded ... 
                    WTTryExec(@()set(plotsPrms, 'Scale', WTNumUtils.str2nums(answer{1,3}))).logWrn().displayWrn('Review parameter', 'Invalid Scale').run().Succeeded ... 
                    WTTryExec(@()set(plotsPrms, 'PeripheralElectrodes', answer{1,4})).logWrn().displayWrn('Review parameter', 'Invalid PeripheralElectrodes').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'Contours', answer{1,5})).logWrn().displayWrn('Review parameter', 'Invalid Contours').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'ElectrodesLabel', answer{1,6})).logWrn().displayWrn('Review parameter', 'Invalid ElectrodesLabel').run().Succeeded ...
                ]);
                
                success = success && WTTryExec(@()plotsPrms.validate(true)).logWrn().displayWrn('Review parameter', 'Validation failure').run().Succeeded; 

                if maxSerieLength > 0 && ~isempty(plotsPrms.TimeResolution) 
                    n = length(plotsPrms.TimeMin : plotsPrms.TimeResolution : plotsPrms.TimeMax);
                    if maxSerieLength < n 
                        WTDialogUtils.wrnDlg('Review parameter', ...
                            [ 'You defined a time serie with %d samples which reflects into as many plots.' ... 
                              'The application manages max %d plots. Adjust please.' ], ...
                              n, maxSerieLength)
                        success = false;
                        continue
                    end
                end
                
                if maxSerieLength > 0 && ~isempty(plotsPrms.FreqResolution) 
                    n = length(plotsPrms.FreqMin : plotsPrms.FreqResolution : plotsPrms.FreqMax);
                    if maxSerieLength < n
                        WTDialogUtils.wrnDlg('Review parameter', ...
                            [ 'You defined a frequency serie with %d samples which reflects into as many plots.' ... 
                              'The application manages max %d plots. Adjust please.' ], ...
                               n, maxSerieLength)
                        success = false;
                        continue
                    end
                end

            end
            success = true;
        end

        function success = define3DScalpMapPlotsSettings(plotsPrms, logFlag)
            success = false; 
            WTValidations.mustBe(plotsPrms, ?WT3DScalpMapPlotsCfg);
            ioProc = WTProject().Config.IOProc;
            wtLog = WTLog();
            
            if isempty(plotsPrms.Scale) || ...
                ((abs(plotsPrms.Scale(1)) == abs(plotsPrms.Scale(2))) && ...
                (logFlag && (plotsPrms.Scale(2) < 3)) || (~logFlag && (plotsPrms.Scale(2) >= 3)))
                plotsPrms.Scale = WTCodingUtils.ifThenElse(logFlag, [-10.0 10.0], [-0.5 0.5]);
            end  

            % Historically the spline file was stored into the channels params, so here we keep that...
            answer = { ...
                sprintf(WTConfigFormatter.FmtArray, num2str(plotsPrms.Time)) ...
                sprintf(WTConfigFormatter.FmtArray, num2str(plotsPrms.Frequency)) ...
                sprintf(WTConfigFormatter.FmtArray, num2str(plotsPrms.Scale)) ...
                plotsPrms.SplineFile, ...
            };

            scaleLabel = WTCodingUtils.ifThenElse(logFlag, 'Scale (% change)', 'Scale (mV)');
            
            function splineFile = selectSplineFile()
                [splineFile, ~, ~] = WTDialogUtils.uiGetFiles(ioProc.SplineFileTypeFlt, -1, -1, 'Select spline file', ...
                    'MultiSelect', 'off', 'restrictToDirs', ['^' regexptranslate('escape', WTLayout.getSplinesDir()) ], ...
                    WTLayout.getSplinesDir());
            end

            userData = struct();
            userData.selectSplineFile = @selectSplineFile;
            
            cbSetSpline = [
                'h = findobj(gcbf, ''tag'', ''spline'');' ...
                'v = get(h, ''userdata'').selectSplineFile();' ...
                'if ~isempty(v)' ...
                '   set(h, ''string'', v);' ...
                'end' ...
            ];

            function params = setParameters(answer) 
                params = { ...
                    { 'style' 'text'       'string' 'Time (ms): From - To     ' } ...
                    { 'style' 'edit'       'string'  answer{1,1} } ...
                    { 'style' 'text'       'string' 'Frequency (Hz): From - To' } ...
                    { 'style' 'edit'       'string'  answer{1,2} } ...
                    { 'style' 'text'       'string'  scaleLabel } ...
                    { 'style' 'edit'       'string'  answer{1,3} } ...
                    { 'style' 'text'       'string' '' } ...
                    { 'style' 'text'       'string' 'Spline reference' } ...
                    { 'style' 'pushbutton' 'string' 'Set' 'callback' cbSetSpline } ...
                    { 'style' 'edit'       'string'  answer{1,4} 'tag' 'spline' 'enable' 'off' 'userdata' userData } ...
                };
            end
            
            geometry = { [1 1] [1 1] [1 1] 1 1 [0.15 0.85] };

            while ~success
                parameters = setParameters(answer);
                answer = WTEEGLabUtils.eeglabInputMask('geometry', geometry, 'uilist', parameters, 'title', 'Set plots parameters');
                
                if isempty(answer)
                    wtLog.dbg('User quitted 3D scalp map plots configuration dialog');
                    return 
                end

                success = all([ ...
                    WTTryExec(@()set(plotsPrms, 'Time', answer{1,1})).logWrn().displayWrn('Review parameter', 'Invalid Time').run().Succeeded ...
                    WTTryExec(@()set(plotsPrms, 'Frequency', answer{1,2})).logWrn().displayWrn('Review parameter', 'Invalid Frequency').run().Succeeded ... 
                    WTTryExec(@()set(plotsPrms, 'Scale', WTNumUtils.str2nums(answer{1,3}))).logWrn().displayWrn('Review parameter', 'Invalid Scale').run().Succeeded ... 
                    WTTryExec(@()set(plotsPrms, 'SplineFile', answer{1,4})).logWrn().displayWrn('Review parameter', 'Invalid SplineFile').run().Succeeded ...
                ]);

                success = success && WTTryExec(@()plotsPrms.validate(true)).logWrn().displayWrn('Review parameter', 'Validation failure').run().Succeeded; 
            end
        end
    end
end