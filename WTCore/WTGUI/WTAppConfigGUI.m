classdef WTAppConfigGUI

    methods(Static)
        function wtAppConfig = configureApplication(updateCurrent, persist)
            updateCurrent = nargin > 0 && updateCurrent;
            persist = nargin > 1 && persist;
            wtLog = WTLog();
            wtProject = WTProject();
            
            if updateCurrent
                wtAppConfig = copy(WTAppConfig());
            else
                [wtAppConfig, success] = WTAppConfig(false).load(false);
                if ~success
                    wtProject.notifyErr([], 'Failed load the application configuration!');
                    return
                end
            end

            cbPrjLog = [ ...
                'status = ''off'';' ...
                'if get(findobj(gcbf, ''tag'', ''kPrjLog''), ''value''),' ... 
                '  status = ''on'';' ...
                'end;' ...
                'set(findobj(gcbf, ''-regexp'', ''tag'', ''prjLog.*''), ''enable'', status);' ];
            cbMuteStdLog = [ ...
                'status = ''on'';' ...
                'if get(findobj(gcbf, ''tag'', ''kStdLogMute''), ''value''),' ... 
                '  status = ''off'';' ...
                'end;' ...
                'set(findobj(gcbf, ''-regexp'', ''tag'', ''stdLog.*''), ''enable'', status);' ];

            logLvlStrs = WTLog.LevelStrs;   
            prjLogLvl = wtAppConfig.ProjectLogLevel;
            stdLogLvl = wtAppConfig.DefaultStdLogLevel;
            enablePrjLogOpt = WTUtils.ifThenElse(wtAppConfig.ProjectLog, 'on', 'off');
            enableStdLogOpt = WTUtils.ifThenElse(wtAppConfig.MuteStdLog, 'off', 'on');

            answer = { ...
                wtAppConfig.ShowSplashScreen ...
                wtAppConfig.PlotsColorMap ...
                wtAppConfig.ProjectLog ...
                prjLogLvl ...
                wtAppConfig.MuteStdLog ...
                wtAppConfig.ColorizedLog ...
                stdLogLvl ...
            };

            parameters = { ...
                { 'style' 'text'      'string' 'Show splash screen' } ...
                { 'style' 'checkbox'  'value'  answer{1,1} } ...
                { 'style' 'text'      'string' 'Plots color map' } ...
                { 'style' 'edit'      'string' answer{1,2} }...
                { 'style' 'text'      'string' 'Project log' } ...
                { 'style' 'checkbox'  'value'  answer{1,3} 'tag' 'kPrjLog' 'callback' cbPrjLog } ...
                { 'style' 'text'      'string' 'Project log level' 'tag' 'prjLogLvlTxt' 'enable' enablePrjLogOpt } ...
                { 'style' 'popupmenu' 'string' logLvlStrs 'value' answer{1,4} 'tag' 'prjLogLvl' 'enable' enablePrjLogOpt }...
                { 'style' 'text'      'string' 'Mute standard log'  } ...
                { 'style' 'checkbox'  'value'  answer{1,5} 'tag' 'kStdLogMute' 'callback' cbMuteStdLog } ...
                { 'style' 'text'      'string' 'Colorised standard log' 'tag' 'stdLogColorTxt' } ...
                { 'style' 'checkbox'  'value'  answer{1,6} 'tag' 'stdLogColor' 'enable' enableStdLogOpt } ...
                { 'style' 'text'      'string' 'Default standard log level' 'tag' 'stdLogLvlTxt' 'enable' enableStdLogOpt } ...
                { 'style' 'popupmenu' 'string' logLvlStrs 'value' answer{1,7} 'tag' 'stdLogLvl' 'enable' enableStdLogOpt } ...
            };
            
            geometry = { [0.6 0.4] [0.6 0.4] [0.6 0.4] [0.6 0.4] [0.6 0.4] [0.6 0.4] [0.6 0.4] };
            success = false;

            while ~success
                answer = WTUtils.eeglabInputMask('geometry', geometry, 'uilist', parameters, 'title', 'Set application configuration');
                
                if isempty(answer)
                    wtAppConfig = [];
                    return 
                end

                try
                    wtAppConfig.ShowSplashScreen = answer{1,1};
                    wtAppConfig.PlotsColorMap = answer{1,2};
                    wtAppConfig.ProjectLog = answer{1,3};
                    wtAppConfig.ProjectLogLevel = answer{1,4};
                    wtAppConfig.MuteStdLog = answer{1,5};
                    wtAppConfig.ColorizedLog = answer{1,6};
                    wtAppConfig.DefaultStdLogLevel = answer{1,7};
                    success = true;
                catch me
                    wtLog.except(me);
                end
                
                if ~success
                    WTUtils.wrnDlg('Review parameter', 'Invalid paramters: check the log for details');
                end
            end

            if updateCurrent
                wtAppConfig.copyTo(WTAppConfig());
            end

            if persist && ~wtAppConfig.persist()
                wtProject.notifyErr([], 'Failed to save the application configuration!');
                wtAppConfig = [];
                return
            end
        end
    end
end